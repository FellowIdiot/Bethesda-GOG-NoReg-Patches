#Not exactly good at working with workflows :,) I'll figure this out as I go

name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
  
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up MinGW
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_MINGW_STATIC=ON -S ${{github.workspace}} -B ${{github.workspace}}/bin

    - name: Compile
      # Build your program with the given configuration
      run: |
        cd bin
        mingw32-make -f Makefile
    - name: Publish
      uses: actions/upload-artifact@v2.2.4
      with:
        name: NoReg_Patch.zip
        path: 'bin'
